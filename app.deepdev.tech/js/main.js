$('.dropdown-toggle').dropdown();
// Simple list
Sortable.create(networkGroup, {
    group : {
        name : "shared",
        pull : true,
        put : true
    },
    sort: true,
    swap: false,
//    ghostClass: 'blue-background-class',
    animation: 150,
    filter : '.locked',
    onSort : function (evt){
        // generateCode();
        try{
            if(!checkValid()){
                alert("Dropout cannot be initial layer! Please insert a Dense layer before dropout.");
                var el = evt.item;
                el.parentNode.removeChild(el);
            }
            else{
                if(document.getElementById('auto-update').checked){
                    generateCode();
                }
            }
        }
        catch(err){

        }  
        
    }
});

$(function() {
    
    $('input').change(function() {
        
        if(document.getElementById('auto-update').checked){
            generateCode();
        }
        // alert("changed!");
    });

    $('select').change(function() {
        if(document.getElementById('auto-update').checked){
            generateCode();
        }
        // alert("changed!");
    });
});


//miscGroup
Sortable.create(miscGroup, {
    sort: false,
    group : {
        name: "shared",
        put: false,
        pull: 'clone'
    },
    filter : '.locked'
});

//layerGroup
Sortable.create(layerGroup, {
    sort: false,
    group : {
        name: "shared",
        put: false,
        pull: 'clone'
    },
    filter : '.locked'
});


Sortable.create(droppable, {
    sort : true,
    group : {
        name: "shared",
        put: true,
    },

    onAdd: function (evt) {
      var el = evt.item;
      el.parentNode.removeChild(el);
    }
});

//actual app
function setOutput(code){
    document.getElementById("code").value = code;
}

function getOutput(){
    return document.getElementById("code").value;
}

function checkValid(){
    if($('#networkGroup').find('div')[0].id === "dropout"){
        return false;
    }
    else return true;
}

function Layer(type='dense', numNodes=null, activation=null, percentage=null){
    this.type=type;
    this.numNodes = numNodes;
    if(activation!=null){
        this.activation = "'"+activation+"'";
    }
    else{
        this.activation = null;
    }
    this.percentage = percentage;
}

let layers = [];

$("#generate").click(function() {
    setOutput('');
    generateCode();
});



//downloading
$("#download").click(function() {
    if(getOutput===""){
        alert("Please Convert to Code before Downloading!");
    }
    else{
        download(getOutput(), "Code Generated by DeepDev" + $("#type-code").val(), '');
    }
});


function download(data, filename, type) {
    var file = new Blob([data], {type: type});
    if (window.navigator.msSaveOrOpenBlob) // IE10+
        window.navigator.msSaveOrOpenBlob(file, filename);
    else { // Others
        var a = document.createElement("a"),
                url = URL.createObjectURL(file);
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        setTimeout(function() {
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);  
        }, 0); 
    }
}



function generateCode(){
    dataset = $('#dataset').val();

    var rawLayersDiv = $('#networkGroup').find('div');
    layers = [];
    for (let i = 0; i < rawLayersDiv.length; i++){
        if(rawLayersDiv[i].id === "dense"){
            denseLayer = rawLayersDiv[i];
            numNodes = $(denseLayer).find('input').val();
            activation = $(denseLayer).find('select').val();
            layers.push(new Layer('dense', numNodes=numNodes, activation=activation));
            // layers.push(new DenseLayer(numNodes, activation));
        }
        else if(rawLayersDiv[i].id === "dropout"){
            dropoutLayer = rawLayersDiv[i];
            percentage = $(dropoutLayer).find('input').val();
            layers.push(new Layer('dropout', null, null, percentage));
        }
    }
    
    outputActivation = $('#output-activation').val();

    trainingLoss = $('#loss').val();
    trainingOptimizer = $('#optimizer').val();

    epochs = $('#epochs').val();
    batchSize = $('#batch-size').val();
    validationSplit = $('#validation-split').val();

    type = $('#type-code').val();

    // got layers
    if(layers.length>0){
        if(type === ".ipynb"){
            generateNotebook(dataset, layers, outputActivation, trainingLoss, trainingOptimizer,
                epochs, batchSize, validationSplit);
        }
        else{
            generatePy(dataset, layers, outputActivation, trainingLoss, trainingOptimizer,
                epochs, batchSize, validationSplit);
        }
    }
    else{
        alert('Cannot generate code: Network is empty');
    }
}

function generatePy(_dataset, _layers, _outputActivation, _trainingLoss, _trainingOptimizer,
    _epochs, _batchSize, _validationSplit){
    let dataset_id = _dataset;
    // let layers = _layers;

    //Dataset Constants
    let NUM_FEATURES = 784;
    let NUM_CLASSES = 10;
    let NUM_TRAIN_SAMPLES = 60000;
    let NUM_TEST_SAMPLES = 10000;

    let dataline1 = "from keras.datasets import " + dataset_id;
    let dataline2 = "(X_train, y_train), (X_test, y_test) = " + dataset_id + ".load_data()";

    switch(dataset_id){
        case "mnist":
            NUM_FEATURES = 28*28;
            NUM_CLASSES = 10;
            NUM_TRAIN_SAMPLES = 60000;
            NUM_TEST_SAMPLES = 10000;
            break;
        case "fashion_mnist":
            NUM_FEATURES = 28*28;
            NUM_CLASSES = 10;
            NUM_TRAIN_SAMPLES = 60000;
            NUM_TEST_SAMPLES = 10000;
            break;
        case "cifar10":
            NUM_FEATURES = 32*32*3;
            NUM_CLASSES = 10;
            NUM_TRAIN_SAMPLES = 50000;
            NUM_TEST_SAMPLES = 10000;
            break;
        case "cifar100":
            NUM_FEATURES = 32*32*3;
            NUM_CLASSES = 100;
            NUM_TRAIN_SAMPLES = 50000;
            NUM_TEST_SAMPLES = 10000;
            break;
        default:
            console.log("Dataset id invalid.");
            break;
    }

    //parameters
    var PARAM_NAME = "Code Generated by DeepDev | " + dataset_id;

    var PARAM_EPOCHS = _epochs;
    var PARAM_OPTIMIZER = "'"+_trainingOptimizer+"'";
    var PARAM_OUTPUT_ACTIVATION = "'"+_outputActivation+"'";
    var PARAM_LOSS = "'"+_trainingLoss+"'";

    var PARAM_BATCH_SIZE = _batchSize;
    var PARAM_SHUFFLE = "True";
    var PARAM_VALIDATION_SPLIT = _validationSplit;

    var PARAM_VERBOSE = 2;

    jQuery.get('templatePy.txt', function(data) {
        raw = data;

        raw = raw.replaceAll("NUM_FEATURES", NUM_FEATURES);
        raw = raw.replaceAll("NUM_CLASSES", NUM_CLASSES);
        raw = raw.replaceAll("NUM_TRAIN_SAMPLES", NUM_TRAIN_SAMPLES);
        raw = raw.replaceAll("NUM_TEST_SAMPLES", NUM_TEST_SAMPLES);
        
        raw = raw.replaceAll("PARAM_EPOCHS", PARAM_EPOCHS);
        raw = raw.replaceAll("PARAM_OPTIMIZER", PARAM_OPTIMIZER);
        raw = raw.replaceAll("PARAM_OUTPUT_ACTIVATION", PARAM_OUTPUT_ACTIVATION);
        raw = raw.replaceAll("PARAM_LOSS", PARAM_LOSS);
        
        raw = raw.replaceAll("PARAM_BATCH_SIZE", PARAM_BATCH_SIZE);
        raw = raw.replaceAll("PARAM_SHUFFLE", PARAM_SHUFFLE);
        raw = raw.replaceAll("PARAM_VALIDATION_SPLIT", PARAM_VALIDATION_SPLIT);
        
        raw = raw.replaceAll("PARAM_VERBOSE", PARAM_VERBOSE);

        file = raw.split("\n");
        
        file[17] = dataline1;
        file[18] = dataline2;

        layerLines = [];
        //input layer
        var inputLayer = "model.add(Dense(PARAM_NUM_NODES, input_shape = ("+NUM_FEATURES+", ), activation=PARAM_ACTIVATION))";
        inputLayer = inputLayer.replaceAll("PARAM_NUM_NODES", layers[0].numNodes);
        inputLayer = inputLayer.replaceAll("PARAM_ACTIVATION", layers[0].activation);
        
        layerLines.push(inputLayer);
        console.log(layers);
        for(let i = 1; i < layers.length; i++){
            if(layers[i].type==="dense"){
                var currentLayer = "model.add(Dense(PARAM_NUM_NODES, activation=PARAM_ACTIVATION))";
                currentLayer = currentLayer.replaceAll("PARAM_NUM_NODES", layers[i].numNodes);
                currentLayer = currentLayer.replaceAll("PARAM_ACTIVATION", layers[i].activation);
                layerLines.push(currentLayer);
                console.log("added dense");
            }
            else if(layers[i].type==="dropout"){
                var currentLayer = "model.add(keras.layers.Dropout(rate=PARAM_RATE))";
                currentLayer = currentLayer.replaceAll("PARAM_RATE", layers[i].percentage);
                layerLines.push(currentLayer);
                console.log("added dropout");
            }
        }
        
        var outputLayer = "model.add(Dense("+NUM_CLASSES+", activation=PARAM_OUTPUT_ACTIVATION))";
        outputLayer = outputLayer.replaceAll("PARAM_OUTPUT_ACTIVATION", PARAM_OUTPUT_ACTIVATION);
        layerLines.push(outputLayer);

        file.splice(42, 0, ...layerLines);

        output = file.join("\n");
        setOutput(output);        
    });

    // console.log(file);
}

function generateNotebook(_dataset, _layers, _outputActivation, _trainingLoss, _trainingOptimizer,
    _epochs, _batchSize, _validationSplit){
    let dataset_id = _dataset;
    // let layers = _layers;

    //Dataset Constants
    let NUM_FEATURES = 784;
    let NUM_CLASSES = 10;
    let NUM_TRAIN_SAMPLES = 60000;
    let NUM_TEST_SAMPLES = 10000;

    let dataline1 = "from keras.datasets import " + dataset_id;
    let dataline2 = "(X_train, y_train), (X_test, y_test) = " + dataset_id + ".load_data()";

    switch(dataset_id){
        case "mnist":
            NUM_FEATURES = 28*28;
            NUM_CLASSES = 10;
            NUM_TRAIN_SAMPLES = 60000;
            NUM_TEST_SAMPLES = 10000;
            break;
        case "fashion_mnist":
            NUM_FEATURES = 28*28;
            NUM_CLASSES = 10;
            NUM_TRAIN_SAMPLES = 60000;
            NUM_TEST_SAMPLES = 10000;
            break;
        case "cifar10":
            NUM_FEATURES = 32*32*3;
            NUM_CLASSES = 10;
            NUM_TRAIN_SAMPLES = 50000;
            NUM_TEST_SAMPLES = 10000;
            break;
        case "cifar100":
            NUM_FEATURES = 32*32*3;
            NUM_CLASSES = 100;
            NUM_TRAIN_SAMPLES = 50000;
            NUM_TEST_SAMPLES = 10000;
            break;
        default:
            console.log("Dataset id invalid.");
            break;
    }

    //parameters
    var PARAM_NAME = "Code Generated by DeepDev | " + dataset_id;

    var PARAM_EPOCHS = _epochs;
    var PARAM_OPTIMIZER = "'"+_trainingOptimizer+"'";
    var PARAM_OUTPUT_ACTIVATION = "'"+_outputActivation+"'";
    var PARAM_LOSS = "'"+_trainingLoss+"'";

    var PARAM_BATCH_SIZE = _batchSize;
    var PARAM_SHUFFLE = "True";
    var PARAM_VALIDATION_SPLIT = _validationSplit;

    var PARAM_VERBOSE = 2;

    loadJSON(function(response) {
        var file = response;
    
        //replacing dataset params
        file = file.replaceAll("NUM_FEATURES", NUM_FEATURES);
        file = file.replaceAll("NUM_CLASSES", NUM_CLASSES);
        file = file.replaceAll("NUM_TRAIN_SAMPLES", NUM_TRAIN_SAMPLES);
        file = file.replaceAll("NUM_TEST_SAMPLES", NUM_TEST_SAMPLES);
        
        //replacing basic variables
        file = file.replaceAll("PARAM_NAME", PARAM_NAME);
        
        file = file.replaceAll("PARAM_EPOCHS", PARAM_EPOCHS);
        file = file.replaceAll("PARAM_OPTIMIZER", PARAM_OPTIMIZER);
        file = file.replaceAll("PARAM_OUTPUT_ACTIVATION", PARAM_OUTPUT_ACTIVATION);
        file = file.replaceAll("PARAM_LOSS", PARAM_LOSS);
        
        file = file.replaceAll("PARAM_BATCH_SIZE", PARAM_BATCH_SIZE);
        file = file.replaceAll("PARAM_SHUFFLE", PARAM_SHUFFLE);
        file = file.replaceAll("PARAM_VALIDATION_SPLIT", PARAM_VALIDATION_SPLIT);
        
        file = file.replaceAll("PARAM_VERBOSE", PARAM_VERBOSE);
        
        //adding the layers
        var notebook = JSON.parse(file);
        //change dataset lines
        
        var datasetCell = notebook.cells.filter(function(cell){
            if(cell.metadata.id == "_-esyj4bPAfm"){
                return true;
            }
            else{
                return false;
            }
        });
        
        //edit lines
        datasetCell[0].source[0] = dataline1 + "\n";
        datasetCell[0].source.push(dataline2 + "\n");
        
        //end of dataset cell
        
        //filter out layers cell
        var layersCell = notebook.cells.filter(function(cell){
            if(cell.metadata.id == "M1oQpPuRxKbn"){
                return true;
            }
            else{
                return false;
            }
        });
        
        //input layer
        var inputLayer = "model.add(Dense(PARAM_NUM_NODES, input_shape = ("+NUM_FEATURES+", ), activation=PARAM_ACTIVATION))";
        inputLayer = inputLayer.replaceAll("PARAM_NUM_NODES", layers[0].numNodes);
        inputLayer = inputLayer.replaceAll("PARAM_ACTIVATION", layers[0].activation);
        
        layersCell[0].source[0] = inputLayer + "\n";
        
        for(var i = 1; i < layers.length; i++){
            if(layers[i].type=="dense"){
                var currentLayer = "model.add(Dense(PARAM_NUM_NODES, activation=PARAM_ACTIVATION))";
                currentLayer = currentLayer.replaceAll("PARAM_NUM_NODES", layers[i].numNodes);
                currentLayer = currentLayer.replaceAll("PARAM_ACTIVATION", layers[i].activation);
                layersCell[0].source.push(currentLayer + "\n");
            }
            else if(layers[i].type=="dropout"){
                var currentLayer = "model.add(keras.layers.Dropout(rate=PARAM_RATE))";
                currentLayer = currentLayer.replaceAll("PARAM_RATE", layers[i].percentage);
                layersCell[0].source.push(currentLayer + "\n");
            }
        }
        
        var outputLayer = "model.add(Dense("+NUM_CLASSES+", activation=PARAM_OUTPUT_ACTIVATION))";
        outputLayer = outputLayer.replaceAll("PARAM_OUTPUT_ACTIVATION", PARAM_OUTPUT_ACTIVATION);
        layersCell[0].source.push(outputLayer + "\n");
        //end of layers
                
        var exportFile = JSON.stringify(notebook);
        
        console.log("FINAL NOTEBOOK:");
        console.log(exportFile);
        setOutput(exportFile);
        
    });

}

String.prototype.replaceAll = function(search, replacement) {
    var target = this;
    return target.replace(new RegExp(search, 'g'), replacement);
};

function loadJSON(callback) {   
    var xobj = new XMLHttpRequest();
    xobj.overrideMimeType("application/json");
    xobj.open('GET', 'template.json', true); // Replace 'my_data' with the path to your file
    xobj.onreadystatechange = function () {
          if (xobj.readyState == 4 && xobj.status == "200") {
            // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode
            callback(xobj.responseText);
          }
    };
    xobj.send(null);
}

